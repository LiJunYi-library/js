{"version":3,"file":"index.esm.js","sources":["src/base/rainbow-element.js","src/grid/index.js","src/absolute/index.js","../rainbow-js/package/array/index.js","src/falls/index.js","src/flex/index.js"],"sourcesContent":["export class RainbowElement extends HTMLElement {\r\n    static $initProps(props) {\r\n        const keys = [];\r\n        const attrs = {};\r\n        for (const key in props) {\r\n            if (Object.prototype.hasOwnProperty.call(props, key)) {\r\n                keys.push(key)\r\n                if (props[key]?.default instanceof Function) attrs[key] = props[key].default(attrs)\r\n                else attrs[key] = props[key]?.default;\r\n\r\n            }\r\n        }\r\n        this.prototype.$props = props\r\n        this.prototype.$attrs = attrs\r\n        return keys\r\n    }\r\n\r\n\r\n    $ASTProps = {};\r\n    $isASTinit = false;\r\n    $childrenResizeObserver;\r\n    $resizeObserver;\r\n    $mutationObserver;\r\n    $mutationObserverInit = { childList: true };\r\n    $cache = { offset: {} };\r\n    $renderEvents = [];\r\n\r\n    constructor() {\r\n        super();\r\n        this.$initResizeObserver();\r\n        this.$initMutationObserver();\r\n        this.$initChildrenResizeObserver();\r\n    }\r\n\r\n    $dispatchOn(eName, ...args) {\r\n        this?.[eName]?.(...args)\r\n        if (this.$renderEvents.includes(eName)) this.$onRender(eName, ...args)\r\n    }\r\n\r\n    $initMutationObserver() {\r\n        try {\r\n            this.$mutationObserver = new MutationObserver(this.$mutationObserverCB.bind(this));\r\n            this.$mutationObserver.observe(this, this.$mutationObserverInit)\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }\r\n    $mutationObserverCB(mutationsList, ...arg) {\r\n        this.$dispatchOn('$onMutation', mutationsList, ...arg)\r\n        for (let mutation of mutationsList) {\r\n            if (mutation.type === \"childList\") {\r\n                const addedNodes = Array.from(mutation.addedNodes).filter(el => el.style);\r\n                const removedNodes = Array.from(mutation.removedNodes).filter(el => el.style);\r\n                addedNodes.forEach(ele => this.$childrenResizeObserver.observe(ele));\r\n                removedNodes.forEach(ele => this.$childrenResizeObserver.unobserve(ele));\r\n                this.$dispatchOn('$onChildChange', mutation)\r\n            } else if (mutation.type === \"attributes\") {\r\n                this.$dispatchOn('$onAttributeChange', mutation)\r\n            }\r\n        }\r\n    }\r\n    $onRender() { }\r\n    $onMutation() { }\r\n    $onChildChange() { }\r\n    $onAttributeChange() { }\r\n\r\n\r\n    $initChildrenResizeObserver() {\r\n        try {\r\n            this.$childrenResizeObserver = new ResizeObserver(this.$childrenResizeObserverCB.bind(this));\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }\r\n\r\n    $childrenResizeObserverCB(...arg) {\r\n        this.$dispatchOn('$onChildrenResize', ...arg);\r\n    }\r\n\r\n\r\n\r\n    $initResizeObserver() {\r\n        try {\r\n            this.$resizeObserver = new ResizeObserver(this.$resizeObserverCB.bind(this));\r\n            this.$resizeObserver.observe(this)\r\n        } catch (error) {\r\n            console.warn(error);\r\n        }\r\n    }\r\n    $resizeObserverCB(...arg) {\r\n        this.$dispatchOn('$onResizeObserver', ...arg);\r\n        const cacheOffset = this.$cache.offset;\r\n        const newOffset = this?.getBoundingClientRect?.();\r\n        if (cacheOffset.width !== newOffset.width || cacheOffset.height !== newOffset.height) this.$dispatchOn('$onResize', newOffset, ...arg)\r\n        if (cacheOffset.width !== newOffset.width) this.$dispatchOn('$onWidthChange', newOffset, ...arg);\r\n        if (cacheOffset.height !== newOffset.height) this.$dispatchOn('$onHeightChange', newOffset, ...arg);\r\n        this.$cache.offset = newOffset;\r\n    }\r\n    $onResize() { }\r\n    $onWidthChange() { }\r\n    $onHeightChange() { }\r\n\r\n\r\n    $setAttrsProp(name, value) {\r\n\r\n        const pop = this.$props[name];\r\n        if (!pop) return this.$attrs[name] = value;\r\n        let cto = pop.type || pop;\r\n        if (cto instanceof Array) {\r\n            let t = cto.map(el => el.name);\r\n            if (t.includes('String')) cto = String\r\n            else cto = cto[0];\r\n        }\r\n        let newV = (() => {\r\n            if (value === 'true') return true;\r\n            if (value === 'false') return false;\r\n            if (value === 'null') return null;\r\n            if (value === 'undefined') return undefined;\r\n            return cto(value);\r\n        })()\r\n        this.$attrs[name] = newV;\r\n    }\r\n    $onAttrsChange() { }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (this.$isASTinit === false) this.$ASTProps[name] = newValue;\r\n        this.$attrs[name] = newValue;\r\n        this.$setAttrsProp(name, newValue)\r\n        if (this.$isASTinit === true) this.$onAttrsChange(this.$attrs, name, oldValue, newValue);\r\n    }\r\n\r\n\r\n    connectedCallback() {\r\n        this.$isASTinit = true;\r\n        Array.from(this.children).forEach(child => this.$childrenResizeObserver.observe(child));\r\n        this.$dispatchOn('$onConnected')\r\n        // console.log('自定义元素添加至页面。', this.offsetWidth);\r\n    }\r\n\r\n    adoptedCallback() {\r\n        this.$dispatchOn('$onAdopted')\r\n        // console.log(\"自定义元素移动至新页面。\");\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        // console.log(\"自定义元素从页面中移除。\");\r\n        this.$resizeObserver?.disconnect?.();\r\n        this.$childrenResizeObserver?.disconnect?.();\r\n        this.$mutationObserver?.disconnect?.();\r\n    }\r\n\r\n}","import { RainbowElement } from '../base/index.js'\r\nimport './index.css'\r\n\r\nexport class RGrid extends RainbowElement {\r\n    static observedAttributes = this.$initProps({\r\n        columns: { type: Number, default: 1 },\r\n        gap: [Number, String],\r\n        'row-gap': [Number, String],\r\n        'column-gap': [Number, String],\r\n        inline: Boolean,\r\n        'min-auto-width': Number,\r\n        wrap: Boolean,\r\n        stretch: Boolean,\r\n        onred: Function\r\n    });\r\n\r\n    $renderEvents = ['$onMutation', '$onWidthChange', '$onAttrsChange']\r\n\r\n    get $columns() {\r\n        if (this.$attrs['min-auto-width']) return Math.floor(this.offsetWidth / this.$attrs['min-auto-width']);\r\n        return this.$attrs.columns\r\n    };\r\n\r\n    $bindStyle(props) {\r\n        Object.assign(this.style, {\r\n            \"display\": props.inline ? \"inline-grid\" : \"grid\",\r\n            \"grid-template-columns\": ` repeat(${this.$columns}, 1fr)`,\r\n            \"grid-gap\": props.gap + \"px\",\r\n            \"row-gap\": (props['row-gap'] || props.gap) + \"px\",\r\n            \"column-gap\": (props['column-gap'] || props.gap) + \"px\",\r\n        })\r\n    }\r\n\r\n    $doLayout() {\r\n        let props = this.$attrs;\r\n        let children = Array.from(this.children)\r\n        let clumnList = children.map(el => el.getAttribute('grid-column') * 1 || 1)\r\n        let start = 1;\r\n        let gridColumns = [];\r\n        let maxColumn = this.$columns + 1;\r\n        clumnList.forEach((num, index) => {\r\n            let end = start + num;\r\n            if (props.wrap) {\r\n                if (end > maxColumn) {\r\n                    if (props.stretch) {\r\n                        if (gridColumns[index - 1]) gridColumns[index - 1].end = maxColumn;\r\n                    }\r\n                    start = 1;\r\n                    let end2 = start + num\r\n                    end = end2 > maxColumn ? maxColumn : end2;\r\n                }\r\n            } else {\r\n                if (end > maxColumn) end = maxColumn\r\n            }\r\n            gridColumns.push({\r\n                start: start,\r\n                end: end,\r\n                index\r\n            })\r\n            start = start + num\r\n            if (start > this.$columns) start = 1\r\n        });\r\n        children.forEach((el, index) => {\r\n            el.classList.add('r-grid-item')\r\n            el.style['grid-column-start'] = gridColumns[index].start\r\n            el.style['grid-column-end'] = gridColumns[index].end\r\n        });\r\n    }\r\n\r\n    $onRender() {\r\n        this.$bindStyle(this.$attrs);\r\n        this.$doLayout();\r\n        this.classList.add('r-grid')\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"r-grid\", RGrid);","import { RainbowElement } from '../base/index.js'\r\nimport './index.css'\r\n\r\nexport class RAbsolute extends RainbowElement {\r\n    static observedAttributes = this.$initProps({\r\n        position: [Boolean, String],\r\n        left: [Number, String],\r\n        right: [Number, String],\r\n        bottom: [Number, String],\r\n        top: [Number, String],\r\n    });\r\n\r\n    $renderEvents = ['$onConnected', '$onAttrsChange']\r\n\r\n    $onRender() {\r\n        let props = this.$attrs\r\n        this.classList.add(...[\r\n            \"r-absolute\",\r\n            props.position && 'r-absolute-' + props.position,\r\n        ].filter(Boolean))\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"r-absolute\", RAbsolute);","const testArr = [\n  // { num: 33, tt: \"奇\" },\n  // { num: 44, tt: \"偶\" },\n  // { num: 11, tt: \"奇***\" },\n  // { num: 99, tt: \"奇***\" },\n  // { num: 22, tt: \"偶\" },\n  // { num: 77, tt: \"奇\" },\n  // { num: 88, tt: \"偶\" },\n  // { num: 99, tt: \"奇----\" },\n  // { num: 55, tt: \"奇\" },\n  // { num: 11, tt: \"奇----\" },\n  // { num: 66, tt: \"偶\" },\n\n  { num: 11, tt: \"奇\" },\n  { num: 22, tt: \"偶\" },\n  { num: 33, tt: \"奇***\" },\n  { num: 44, tt: \"偶***\" },\n  { num: 55, tt: \"奇\" },\n  { num: 66, tt: \"偶\" },\n  { num: 77, tt: \"奇\" },\n  { num: 88, tt: \"偶----\" },\n  { num: 99, tt: \"奇\" },\n];\n\nexport * from \"./sql.js\";\n\nif (!Array.prototype.at) {\n  Array.prototype.at = function (...arg) {\n    return arrayAt(this, ...arg);\n  };\n}\n\nexport function arrayAt(list, index) {\n  let nth = index < 0 ? list.length + index : index;\n  return list[nth];\n}\n\n//循环\nexport function arrayLoop(num, cb) {\n  for (let index = 0; index < num; index++) {\n    if (cb(index) === false) return;\n  }\n}\n//循环创建\nexport function arrayLoopMap(num, cb) {\n  const arr = [];\n  for (let index = 0; index < num; index++) {\n    arr.push(cb(index));\n  }\n  return arr;\n}\n//冒泡查找\nexport function arrayBubble(list = [], formatter, verdict) {\n  let value = null;\n  let index;\n  let item;\n  list.forEach((ele, nth) => {\n    if (value === null) {\n      item = ele;\n      index = nth;\n      value = formatter(ele, nth, list);\n      return;\n    }\n\n    if (verdict(value, ele, nth, list)) {\n      item = ele;\n      index = nth;\n      value = formatter(ele, nth, list);\n    }\n  });\n  return item;\n}\n//冒泡查找最小\nexport function arrayBubbleMin(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) < value\n  );\n}\n//冒泡倒数查找最小\nexport function arrayBubbleLastMin(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) <= value\n  );\n}\n//冒泡查找最大\nexport function arrayBubbleMax(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) > value\n  );\n}\n//冒泡倒数查找最大\nexport function arrayBubbleLastMax(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) >= value\n  );\n}\n// 删除数组中的第n个 改变数组\nexport function arrayRemoveIndex(list = [], num) {\n  list.splice(num, 1);\n  return list;\n}\n// 删除数组中第一个找到的item 不改变数组\nexport function arrayRemove(list = [], item) {\n  const index = list.findIndex((el) => el === item);\n  if (~index) list.splice(index, 1);\n  return list;\n}\n// 删除数组中最后一个找到的item  不改变数组\nexport function arrayRemoveLast(list = [], item) {\n  const index = list.findLastIndex((el) => el === item);\n  if (~index) list.splice(index, 1);\n  return list;\n}\n// 删除数组中的所有 相同的 item 改变数组\nexport function arrayRemoves(list = [], item) {\n  const sames = list.filter((el) => el === item);\n  sames.forEach((el) => {\n    arrayRemove(list, el);\n  });\n  return list;\n}\n// 切割数组的index\nexport function arraySplitIndex(list = [], num) {\n  const arr = [];\n  for (let index = 0; index < list.length; index += num) {\n    const ar = [];\n    const max = index + num > list.length ? list.length : index + num;\n    for (let j = index; j < max; j++) {\n      ar.push(j);\n    }\n    arr.push(ar);\n  }\n  return arr;\n}\n// 切割数组\nexport function arraySplit(list = [], num) {\n  const arr = [];\n  for (let index = 0; index < list.length; index += num) {\n    const max = index + num > list.length ? list.length : index + num;\n    const ar = list.slice(index, max);\n    arr.push(ar);\n  }\n  return arr;\n}\n// 数组 根据某个属性 去重\nexport function arrayWipeRepetition(list = [], formatter) {\n  if (!formatter) return [...new Set(list)];\n  const map = new Map();\n  return list.filter(\n    (item, index) =>\n      !map.has(formatter(item, index).toString()) &&\n      map.set(formatter(item, index).toString())\n  );\n}\n// 数组 根据某个属性 去重 从后面\nexport function arrayWipeRepetitionLast(list = [], formatter) {\n  if (!formatter) return [...new Set(list)];\n  const map = {};\n  list.forEach((item, index) => (map[formatter(item, index)] = item));\n  const arr = [];\n  for (const key in map) {\n    if (Object.hasOwnProperty.call(map, key)) {\n      const element = map[key];\n      arr.push(element);\n    }\n  }\n  return arr;\n}\n// 数组提取相同\nexport function arrayExtractSame(list = [], formatter) {\n  const map = {};\n  list.forEach((item) => {\n    if (!map[formatter(item)]) map[formatter(item)] = [];\n    map[formatter(item)].push(item);\n  });\n  const arr = [];\n  for (const key in map) {\n    if (Object.hasOwnProperty.call(map, key)) {\n      const element = map[key];\n      if (element.length > 1) arr.push(element);\n    }\n  }\n  return arr.flat();\n}\n\n// 数组排序 根据属性正序\nexport function arraySort(list = [], formatter, formatter2) {\n  let fmt = formatter2 || formatter\n  list.sort((a, b) => formatter(a) - fmt(b))\n  return list;\n}\n\nexport function arraySortMin(...arg) {\n  return arraySort(...arg)[0]\n}\n\nexport function arraySortMax(list = [], ...arg) {\n  return arraySort(list, ...arg)[list.length - 1]\n}\n\n// 数组排序  根据属性倒序\nexport function arrayReverseSort(list = [], formatter, formatter2) {\n  let fmt = formatter2 || formatter\n  list.sort((a, b) => fmt(b) - formatter(a))\n  return list;\n}\n\nexport function arrayReverseSortMin(...arg) {\n  return arrayReverseSort(...arg)[list.length - 1]\n}\n\nexport function arrayReverseSortMax(list = [], ...arg) {\n  return arrayReverseSort(list, ...arg)[0]\n}\n\n/**\n * 数组排序 根据另一个数组的属性\n * @param {*} list\n * @param {*} arr\n * @param {*} formatter\n * @returns\n */\nexport function arraySortByList(list, arr, formatter) {\n  list.forEach((item) => {\n    const sortIndex = arr.findIndex((ele) => formatter(item, ele));\n    item.sortIndex = sortIndex === -1 ? list.length : sortIndex;\n  });\n  list.sort(function (a, b) {\n    return a.sortIndex - b.sortIndex;\n  });\n  return list;\n}\n// 数组打乱\nexport function arrayRandom(list) {\n  const length = list.length;\n  for (let nth = 0; nth < length; nth++) {\n    const index = Math.floor(Math.random() * (list.length - 1));\n    list.push(list[index]);\n    list.splice(index, 1);\n  }\n}\n// 触发数组方法\nexport function arrayInvokeFuns(...args) {\n  const [list, formatter, ...arg] = args;\n  let funArgs = [formatter, ...arg];\n  let fmt = (item) => item;\n  if (formatter instanceof Function) {\n    fmt = formatter;\n    funArgs = [...arg];\n  }\n  list.forEach((item) => {\n    const fun = fmt(item);\n    fun(...funArgs);\n  });\n}\n/* 事件派发 */\nexport function arrayEvents() {\n  const events = [];\n\n  function push(eventCB) {\n    events.push(eventCB);\n  }\n\n  function remove(eventCB) {\n    arrayRemove(events, eventCB);\n  }\n\n  function invoke(...args) {\n    arrayInvokeFuns(events, ...args);\n  }\n\n  function invokes(fun) {\n    events.forEach(fun);\n  }\n\n  return { events, push, remove, invoke, invokes };\n}\n\n/* 二分查找 */\nexport function arrayBinarySearch(setPointer = (args, index) => (args.right = index - 1), arr = [], formatter, compare) {\n  const fg = {\n    left: 0,\n    right: arr.length - 1,\n    result: -1,\n  }\n  while (fg.left <= fg.right) {\n    const index = Math.floor((fg.left + fg.right) / 2);\n    const item = arr[index]\n    if (formatter(item)) {\n      fg.result = index;\n      setPointer(fg, index, item)\n    } else if (compare(item)) {\n      fg.left = index + 1;\n    } else {\n      fg.right = index - 1;\n    }\n  }\n  return fg.result;\n}\n/* 二分查找到符合条件的第一个元素的下标 没有找到返回-1 compare<*/\nexport function arrayBinaryFindIndex(arr = [], formatter, compare) {\n  return arrayBinarySearch((args, index) => {\n    args.right = index - 1\n  }, arr, formatter, compare);\n}\n/* 二分查找到符合条件的第一个元素 没有找到返回undefined compare<*/\nexport function arrayBinaryFind(arr = [], formatter, compare) {\n  const index = arrayBinaryFindIndex(arr, formatter, compare);\n  return index === -1 ? undefined : arr[index]\n}\n/* 二分查找到符合条件的最后一个元素的下标 没有找到返回-1 compare<*/\nexport function arrayBinaryFindLastIndex(arr = [], formatter, compare) {\n  return arrayBinarySearch((args, index) => {\n    args.left = index + 1;\n  }, arr, formatter, compare);\n}\n/* 二分查找到符合条件的最后一个元素 没有找到返回undefined compare<*/\nexport function arrayBinaryFindLast(arr = [], formatter, compare) {\n  const index = arrayBinaryFindLastIndex(arr, formatter, compare);\n  return index === -1 ? undefined : arr[index]\n}\n\n\n\n","import { RainbowElement } from '../base/index.js'\r\nimport { arrayLoopMap } from '@rainbow_ljy/rainbow-js'\r\nimport './index.css'\r\n\r\n\r\nexport class RFalls extends RainbowElement {\r\n    static observedAttributes = this.$initProps({\r\n        'min-auto-width': Number,\r\n        'columns': { type: Number, default: 2 },\r\n        'gap': { type: Number, default: 0 },\r\n        'row-gap': { type: Number, default: 0 },\r\n        'column-gap': { type: Number, default: 0 },\r\n    });\r\n\r\n    constructor(...arg){\r\n        super(...arg)\r\n    }\r\n\r\n\r\n    get $col() {\r\n        if (this.$attrs['min-auto-width']) return Math.floor(this.offsetWidth / this.$attrs['min-auto-width']);\r\n        return this.$attrs.columns\r\n    };\r\n\r\n    get $coGap() {\r\n        return (this.$attrs['column-gap'] || this.$attrs.gap)\r\n    }\r\n\r\n    get $roGap() {\r\n        return (this.$attrs['row-gap'] || this.$attrs.gap)\r\n    }\r\n\r\n    get $itemWidth() {\r\n        return `calc( ${100 / this.$col}% - ${((this.$col - 1) * this.$coGap) / this.$col}px )`;\r\n    }\r\n\r\n    $getLeft(i) {\r\n        return `calc( ${(100 / this.$col) * i}% - ${(((this.$col - 1) * this.$coGap) / this.$col) * i}px + ${i * this.$coGap}px )`;\r\n    }\r\n\r\n    $createList() {\r\n        const list = arrayLoopMap(this.$col, (i) => ({ height: 0, left: this.$getLeft(i), top: 0, index: i }));\r\n        list.getMinHeightItem = () => {\r\n            let item = list[0];\r\n            list.forEach((el) => { if (el.height < item.height) item = el });\r\n            return item;\r\n        }\r\n        list.getMaxHeightItem = () => {\r\n            let item = list[0];\r\n            list.forEach((el) => { if (el.height > item.height) item = el });\r\n            return item;\r\n        }\r\n        return list\r\n    }\r\n\r\n    $renderEvents = ['$onMutation', '$onWidthChange', '$onChildrenResize', '$onAttrsChange']\r\n\r\n    $onRender() {\r\n        this.classList.add('r-falls');\r\n        const list = this.$createList();\r\n\r\n        Array.from(this.children).forEach(child => {\r\n            child.classList.add('r-falls-item');\r\n            child.style.width = this.$itemWidth;\r\n            let node = list.getMinHeightItem();\r\n            if (node.height) node.height = node.height + this.$roGap;\r\n            child.style.left = node.left;\r\n            child.style.top = node.height + 'px';\r\n            node.height = node.height + child.offsetHeight;\r\n        });\r\n\r\n        this.style.height = list.getMaxHeightItem().height + 'px'\r\n\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"r-falls\", RFalls);","import { RainbowElement } from '../base/index.js'\r\nimport './index.css'\r\n\r\nexport class RFlex extends RainbowElement {\r\n    static observedAttributes = this.$initProps({\r\n        direction: { type: String, default: \"row\" },\r\n        inline: Boolean,\r\n        reverse: Boolean,\r\n        wrap: Boolean,\r\n        justify: { type: String, default: \"\" },\r\n        align: { type: String, default: \"\" },\r\n        'align-self': { type: String, default: \"\" },\r\n        auto: { type: [String, Boolean], default: \"\" },\r\n        fill: { type: [String, Boolean], default: \"\" },\r\n        gap: { type: [Number, String], default: \"\" },\r\n        'row-gap': [Number, String],\r\n        'column-gap': [Number, String],\r\n    });\r\n\r\n    $renderEvents = ['$onConnected', '$onAttrsChange']\r\n\r\n    $onRender() {\r\n        let props = this.$attrs\r\n        this.classList.add(...[\r\n            \"r-flex\",\r\n            props.inline && \"r-inline-flex\",\r\n            props.direction && `r-flex-direction-${props.direction}`,\r\n            props.reverse && `r-flex-direction-${props.direction}-reverse`,\r\n            props.wrap && \"r-flex-wrap\",\r\n            props.justify && `r-flex-justify-${props.justify}`,\r\n            props.auto && `r-flex-justify-auto-${props.auto}`,\r\n            props.align && `r-flex-align-${props.align}`,\r\n            props['align-self'] && `r-flex-align-self-${props['align-self']}`,\r\n            props.fill && `r-flex-fill-${props.fill}`,\r\n        ].filter(Boolean))\r\n\r\n        Object.assign(this.style, {\r\n            \"grid-gap\": props.gap + \"px\",\r\n            \"row-gap\": (props['row-gap'] || props.gap) + \"px\",\r\n            \"column-gap\": (props['column-gap'] || props.gap) + \"px\",\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\ncustomElements.define(\"r-flex\", RFlex);"],"names":["RainbowElement","HTMLElement","$initProps","props","keys","attrs","key","Object","prototype","hasOwnProperty","call","push","default","Function","this","$props","$attrs","$ASTProps","$isASTinit","$childrenResizeObserver","$resizeObserver","$mutationObserver","$mutationObserverInit","childList","$cache","offset","$renderEvents","constructor","super","$initResizeObserver","$initMutationObserver","$initChildrenResizeObserver","$dispatchOn","eName","args","includes","$onRender","MutationObserver","$mutationObserverCB","bind","observe","error","console","warn","mutationsList","arg","mutation","type","addedNodes","Array","from","filter","el","style","removedNodes","forEach","ele","unobserve","$onMutation","$onChildChange","$onAttributeChange","ResizeObserver","$childrenResizeObserverCB","$resizeObserverCB","cacheOffset","newOffset","getBoundingClientRect","width","height","$onResize","$onWidthChange","$onHeightChange","$setAttrsProp","name","value","pop","cto","t","map","String","newV","$onAttrsChange","attributeChangedCallback","oldValue","newValue","connectedCallback","children","child","adoptedCallback","disconnectedCallback","disconnect","RGrid","static","columns","Number","gap","inline","Boolean","wrap","stretch","onred","$columns","Math","floor","offsetWidth","$bindStyle","assign","display","$doLayout","clumnList","getAttribute","start","gridColumns","maxColumn","num","index","end","end2","classList","add","customElements","define","RAbsolute","position","left","right","bottom","top","at","list","nth","length","arrayAt","RFalls","$col","$coGap","$roGap","$itemWidth","$getLeft","i","$createList","cb","arr","arrayLoopMap","getMinHeightItem","item","getMaxHeightItem","node","offsetHeight","RFlex","direction","reverse","justify","align","auto","fill"],"mappings":"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"}