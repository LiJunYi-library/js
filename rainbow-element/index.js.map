{"version":3,"file":"index.js","sources":["src/base/utils.js","src/base/imps/treeAttrsChangeIMP.js","src/base/imps/resizeObserverIMP.js","src/base/imps/treeObserverIMP.js","../rainbow-js/package/array/index.js","../rainbow-js/package/timer/index.js","src/base/rainbow-element.js","src/grid/index.js","src/absolute/index.js","src/falls/index.js","src/scroll/index.js","src/scroll-memory-bable/index.js","src/rolling-text/index.js"],"sourcesContent":["export function deleteKey(target, source, bool) {\r\n  for (const key in target) {\r\n    if (Object.prototype.hasOwnProperty.call(target, key)) {\r\n      try {\r\n        if (bool) source[key] = \"\";\r\n        delete source[key];\r\n      } catch (error) {}\r\n    }\r\n  }\r\n}\r\n\r\nexport function assignStyle(style, newStyle) {\r\n  for (const key in newStyle) {\r\n    if (Object.prototype.hasOwnProperty.call(newStyle, key)) {\r\n      style[key] = \"\";\r\n      style[key] = newStyle[key];\r\n    }\r\n  }\r\n}\r\n\r\nexport function convertToCamelCase(str) {\r\n  if (str.includes(\"-\")) {\r\n    const parts = str.split(\"-\");\r\n    const firstPart = parts[0];\r\n    const remainingParts = parts\r\n      .slice(1)\r\n      .map((part) => part.charAt(0).toUpperCase() + part.slice(1));\r\n    return firstPart + remainingParts.join(\"\");\r\n  }\r\n  return str;\r\n}\r\n\r\nexport function camelCaseToKebabCase(str) {\r\n  return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n}\r\n\r\n// bubbles: true, cancelable: true,\r\n\r\nexport class RainbowEvent extends Event {\r\n  constructor(type, eventInitDict, event) {\r\n    super(type, eventInitDict);\r\n    this.detail = event;\r\n    if (event instanceof Array) {\r\n      for (const key in event) {\r\n        try {\r\n          if (this[key] === undefined) this[key] = event[key];\r\n        } catch (error) {\r\n          console.warn(error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function createCustomEvent(name, event, eventInitDict = {}) {\r\n  const newEvent = new CustomEvent(name, { bubbles: true, cancelable: true, ...eventInitDict });\r\n  for (const key in event) {\r\n    try {\r\n      if (newEvent[key] === undefined) newEvent[key] = event[key];\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  }\r\n  return newEvent;\r\n}\r\n\r\nexport function renderChildren(props = {}) {\r\n  const options = { parentNode: undefined, ...props };\r\n  let cacheMap = new Map();\r\n  let pointer = undefined;\r\n\r\n  function renderList(source = [], p) {\r\n    const config = {\r\n      beforeEach: () => 0,\r\n      keyExtractor: (item, index) => index,\r\n      onCacheNode: () => 0,\r\n      onCreateNode: () => 0,\r\n      ...p,\r\n    };\r\n    const map = new Map();\r\n    pointer = undefined;\r\n    config.beforeEach({ cacheMap, pointer });\r\n    source.forEach((item, index) => {\r\n      const key = config.keyExtractor(item, index);\r\n      let node;\r\n      if (cacheMap.has(key)) {\r\n        node = cacheMap.get(key);\r\n        config.onCacheNode(node, item, index, key);\r\n        if (pointer) {\r\n          if (pointer.nextSibling === node) {\r\n            //当前指针的下一个和要渲染的div相同 b不做处理\r\n          } else {\r\n            options.parentNode.insertBefore(node, pointer.nextSibling);\r\n          }\r\n        }\r\n        pointer = node;\r\n        cacheMap.delete(key);\r\n      } else {\r\n        node = config.onCreateNode(item, index, key);\r\n        if (pointer) options.parentNode.insertBefore(node, undefined);\r\n        else options.parentNode.insertBefore(node, pointer?.nextSibling);\r\n        pointer = node;\r\n      }\r\n\r\n      map.set(key, node);\r\n    });\r\n    cacheMap.forEach((node) => node.remove());\r\n    pointer = undefined;\r\n    cacheMap = map;\r\n  }\r\n\r\n  return { renderList };\r\n}\r\n","const events = new Map();\r\n\r\nnew MutationObserver((mutations) => {\r\n    events.forEach((fun, item) => {\r\n        if (fun instanceof Function) fun.call(item, mutations)\r\n    })\r\n    // console.log('document MutationObserver')\r\n}).observe(document, { subtree: true, attributes: true, attributeOldValue: true })\r\n\r\n\r\nexport const treeAttrsChangeIMP = {\r\n    simult: {\r\n        init() {\r\n            if (!this.$changePropsRender) return;\r\n            events.set(this, () => this.$changePropsRender())\r\n        },\r\n        disconnected() {\r\n            events.delete(this)\r\n        },\r\n    },\r\n    settle: {\r\n        init() { },\r\n    },\r\n    async: {\r\n        init() { },\r\n    }\r\n}\r\n\r\n","export function resizeObserverIMP(props = {}) {\r\n    let obs;\r\n    const config = {\r\n        isOnlyResizeWidth: false,\r\n        isOnlyResizeHeight: false,\r\n        resizeCallback: undefined,\r\n        resizeOptions: {},\r\n        ...props\r\n    }\r\n\r\n    let cache = {}\r\n\r\n    return {\r\n        simult: {\r\n            init() {\r\n                const cb = config.resizeCallback ? config.resizeCallback.bind(this) : this.$debouncedRender.bind(this);\r\n                try {\r\n                    obs = new ResizeObserver((...arg) => {\r\n                        let offset = { width: this.offsetWidth, height: this.offsetHeight };\r\n                        if (config.isOnlyResizeWidth && cache.width !== offset.width) cb(...arg)\r\n                        if (config.isOnlyResizeHeight && cache.height !== offset.height) cb(...arg)\r\n                        if (!config.isOnlyResizeWidth && !config.isOnlyResizeHeight) cb(...arg)\r\n                        cache = offset;\r\n                    });\r\n                    obs.observe(this, config.resizeOptions)\r\n                } catch (error) {\r\n                    console.warn(error);\r\n                }\r\n            },\r\n            disconnected() {\r\n                obs.disconnect(this)\r\n            },\r\n        },\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","export function treeObserverIMP(props = {}) {\r\n    let mObserver;\r\n    let rObserver;\r\n\r\n    const config = {\r\n        childrenResizeOptions: {},\r\n        onChildrenSizeChange() { },\r\n        resizeOptions: {},\r\n        onSizeChange() { },\r\n        onWidthChange() { },\r\n        onHeightChange() { },\r\n\r\n\r\n\r\n        mutationOptions: { childList: true },\r\n        onChildChange() { },\r\n        onAttributeChange() { },\r\n        ...props\r\n    }\r\n\r\n    let cache = {\r\n        offset: {},\r\n    }\r\n\r\n    return {\r\n        simult: {\r\n            init() {\r\n                try {\r\n                    rObserver = new ResizeObserver((entries, ...arg) => {\r\n                        let offset = { width: this.offsetWidth, height: this.offsetHeight };\r\n                        if (cache.offset.width !== offset.width) config.onWidthChange.call(this, entries, offset);\r\n                        if (cache.offset.height !== offset.height) config.onHeightChange.call(this, entries, offset);\r\n                        if (cache.offset.width !== offset.width || cache.offset.height !== offset.height) {\r\n                            config.onSizeChange.call(this, entries, offset);\r\n                        }\r\n                        cache.offset = offset;\r\n                        let includes = entries.some((el) => el.target === this)\r\n                        if (includes === false) config.onChildrenSizeChange.call(this, entries);\r\n                    });\r\n                    rObserver?.observe?.(this, config.resizeOptions)\r\n                } catch (error) {\r\n                    console.warn(error);\r\n                }\r\n                mObserver = new MutationObserver((mutations, ...arg) => {\r\n                    for (let mutation of mutations) {\r\n                        if (mutation.type === \"childList\") {\r\n                            const addedNodes = Array.from(mutation.addedNodes).filter(el => el.style);\r\n                            const removedNodes = Array.from(mutation.removedNodes).filter(el => el.style);\r\n                            addedNodes.forEach(ele => rObserver.observe(ele, config.childrenResizeOptions));\r\n                            removedNodes.forEach(ele => rObserver.unobserve(ele));\r\n                            config.onChildChange.call(this, mutation);\r\n                        } else if (mutation.type === \"attributes\") {\r\n                            config.onAttributeChange.call(this, mutation);\r\n                        }\r\n                    }\r\n                })\r\n                mObserver.observe(this, config.mutationOptions)\r\n            },\r\n            disconnected() {\r\n                mObserver.disconnect(this)\r\n                rObserver.disconnect(this)\r\n            },\r\n        },\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","const testArr = [\n  // { num: 33, tt: \"奇\" },\n  // { num: 44, tt: \"偶\" },\n  // { num: 11, tt: \"奇***\" },\n  // { num: 99, tt: \"奇***\" },\n  // { num: 22, tt: \"偶\" },\n  // { num: 77, tt: \"奇\" },\n  // { num: 88, tt: \"偶\" },\n  // { num: 99, tt: \"奇----\" },\n  // { num: 55, tt: \"奇\" },\n  // { num: 11, tt: \"奇----\" },\n  // { num: 66, tt: \"偶\" },\n\n  { num: 11, tt: \"奇\" },\n  { num: 22, tt: \"偶\" },\n  { num: 33, tt: \"奇***\" },\n  { num: 44, tt: \"偶***\" },\n  { num: 55, tt: \"奇\" },\n  { num: 66, tt: \"偶\" },\n  { num: 77, tt: \"奇\" },\n  { num: 88, tt: \"偶----\" },\n  { num: 99, tt: \"奇\" },\n];\n\nexport * from \"./sql.js\";\n\nif (!Array.prototype.at) {\n  Array.prototype.at = function (...arg) {\n    return arrayAt(this, ...arg);\n  };\n}\n\nexport function arrayAt(list, index) {\n  let nth = index < 0 ? list.length + index : index;\n  return list[nth];\n}\n\n//循环\nexport function arrayLoop(num, cb) {\n  for (let index = 0; index < num; index++) {\n    if (cb(index) === false) return;\n  }\n}\n//循环创建\nexport function arrayLoopMap(num, cb) {\n  const arr = [];\n  for (let index = 0; index < num; index++) {\n    arr.push(cb(index));\n  }\n  return arr;\n}\n//冒泡查找\nexport function arrayBubble(list = [], formatter, verdict) {\n  let value = null;\n  let index;\n  let item;\n  list.forEach((ele, nth) => {\n    if (value === null) {\n      item = ele;\n      index = nth;\n      value = formatter(ele, nth, list);\n      return;\n    }\n\n    if (verdict(value, ele, nth, list)) {\n      item = ele;\n      index = nth;\n      value = formatter(ele, nth, list);\n    }\n  });\n  return item;\n}\n//冒泡查找最小\nexport function arrayBubbleMin(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) < value\n  );\n}\n//冒泡倒数查找最小\nexport function arrayBubbleLastMin(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) <= value\n  );\n}\n//冒泡查找最大\nexport function arrayBubbleMax(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) > value\n  );\n}\n//冒泡倒数查找最大\nexport function arrayBubbleLastMax(list = [], formatter) {\n  return arrayBubble(\n    list,\n    formatter,\n    (value, item, index, list) => formatter(item, index, list) >= value\n  );\n}\n// 删除数组中的第n个 改变数组\nexport function arrayRemoveIndex(list = [], num) {\n  list.splice(num, 1);\n  return list;\n}\n// 删除数组中第一个找到的item 不改变数组\nexport function arrayRemove(list = [], item) {\n  const index = list.findIndex((el) => el === item);\n  if (~index) list.splice(index, 1);\n  return list;\n}\n// 删除数组中最后一个找到的item  不改变数组\nexport function arrayRemoveLast(list = [], item) {\n  const index = list.findLastIndex((el) => el === item);\n  if (~index) list.splice(index, 1);\n  return list;\n}\n// 删除数组中的所有 相同的 item 改变数组\nexport function arrayRemoves(list = [], item) {\n  const sames = list.filter((el) => el === item);\n  sames.forEach((el) => {\n    arrayRemove(list, el);\n  });\n  return list;\n}\n// 切割数组的index\nexport function arraySplitIndex(list = [], num) {\n  const arr = [];\n  for (let index = 0; index < list.length; index += num) {\n    const ar = [];\n    const max = index + num > list.length ? list.length : index + num;\n    for (let j = index; j < max; j++) {\n      ar.push(j);\n    }\n    arr.push(ar);\n  }\n  return arr;\n}\n// 切割数组\nexport function arraySplit(list = [], num) {\n  const arr = [];\n  for (let index = 0; index < list.length; index += num) {\n    const max = index + num > list.length ? list.length : index + num;\n    const ar = list.slice(index, max);\n    arr.push(ar);\n  }\n  return arr;\n}\n// 数组 根据某个属性 去重\nexport function arrayWipeRepetition(list = [], formatter) {\n  if (!formatter) return [...new Set(list)];\n  const map = new Map();\n  return list.filter(\n    (item, index) =>\n      !map.has(formatter(item, index).toString()) &&\n      map.set(formatter(item, index).toString())\n  );\n}\n// 数组 根据某个属性 去重 从后面\nexport function arrayWipeRepetitionLast(list = [], formatter) {\n  if (!formatter) return [...new Set(list)];\n  const map = {};\n  list.forEach((item, index) => (map[formatter(item, index)] = item));\n  const arr = [];\n  for (const key in map) {\n    if (Object.hasOwnProperty.call(map, key)) {\n      const element = map[key];\n      arr.push(element);\n    }\n  }\n  return arr;\n}\n// 数组提取相同\nexport function arrayExtractSame(list = [], formatter) {\n  const map = {};\n  list.forEach((item) => {\n    if (!map[formatter(item)]) map[formatter(item)] = [];\n    map[formatter(item)].push(item);\n  });\n  const arr = [];\n  for (const key in map) {\n    if (Object.hasOwnProperty.call(map, key)) {\n      const element = map[key];\n      if (element.length > 1) arr.push(element);\n    }\n  }\n  return arr.flat();\n}\n\n// 数组排序 根据属性正序\nexport function arraySort(list = [], formatter, formatter2) {\n  let fmt = formatter2 || formatter\n  list.sort((a, b) => formatter(a) - fmt(b))\n  return list;\n}\n\nexport function arraySortMin(...arg) {\n  return arraySort(...arg)[0]\n}\n\nexport function arraySortMax(list = [], ...arg) {\n  return arraySort(list, ...arg)[list.length - 1]\n}\n\n// 数组排序  根据属性倒序\nexport function arrayReverseSort(list = [], formatter, formatter2) {\n  let fmt = formatter2 || formatter\n  list.sort((a, b) => fmt(b) - formatter(a))\n  return list;\n}\n\nexport function arrayReverseSortMin(...arg) {\n  return arrayReverseSort(...arg)[list.length - 1]\n}\n\nexport function arrayReverseSortMax(list = [], ...arg) {\n  return arrayReverseSort(list, ...arg)[0]\n}\n\n/**\n * 数组排序 根据另一个数组的属性\n * @param {*} list\n * @param {*} arr\n * @param {*} formatter\n * @returns\n */\nexport function arraySortByList(list, arr, formatter) {\n  list.forEach((item) => {\n    const sortIndex = arr.findIndex((ele) => formatter(item, ele));\n    item.sortIndex = sortIndex === -1 ? list.length : sortIndex;\n  });\n  list.sort(function (a, b) {\n    return a.sortIndex - b.sortIndex;\n  });\n  return list;\n}\n// 数组打乱\nexport function arrayRandom(list) {\n  const length = list.length;\n  for (let nth = 0; nth < length; nth++) {\n    const index = Math.floor(Math.random() * (list.length - 1));\n    list.push(list[index]);\n    list.splice(index, 1);\n  }\n}\n// 触发数组方法\nexport function arrayInvokeFuns(...args) {\n  const [list, formatter, ...arg] = args;\n  let funArgs = [formatter, ...arg];\n  let fmt = (item) => item;\n  if (formatter instanceof Function) {\n    fmt = formatter;\n    funArgs = [...arg];\n  }\n  list.forEach((item) => {\n    const fun = fmt(item);\n    fun(...funArgs);\n  });\n}\n/* 事件派发 */\nexport function arrayEvents() {\n  const events = [];\n\n  function push(eventCB) {\n    events.push(eventCB);\n  }\n\n  function remove(eventCB) {\n    arrayRemove(events, eventCB);\n  }\n\n  function invoke(...args) {\n    arrayInvokeFuns(events, ...args);\n  }\n\n  function invokes(fun) {\n    events.forEach(fun);\n  }\n\n  return { events, push, remove, invoke, invokes };\n}\n\n/* 二分查找 */\nexport function arrayBinarySearch(setPointer = (args, index) => (args.right = index - 1), arr = [], formatter, compare) {\n  const fg = {\n    left: 0,\n    right: arr.length - 1,\n    result: -1,\n  }\n  while (fg.left <= fg.right) {\n    const index = Math.floor((fg.left + fg.right) / 2);\n    const item = arr[index]\n    if (formatter(item)) {\n      fg.result = index;\n      setPointer(fg, index, item)\n    } else if (compare(item)) {\n      fg.left = index + 1;\n    } else {\n      fg.right = index - 1;\n    }\n  }\n  return fg.result;\n}\n/* 二分查找到符合条件的第一个元素的下标 没有找到返回-1 compare<*/\nexport function arrayBinaryFindIndex(arr = [], formatter, compare) {\n  return arrayBinarySearch((args, index) => {\n    args.right = index - 1\n  }, arr, formatter, compare);\n}\n/* 二分查找到符合条件的第一个元素 没有找到返回undefined compare<*/\nexport function arrayBinaryFind(arr = [], formatter, compare) {\n  const index = arrayBinaryFindIndex(arr, formatter, compare);\n  return index === -1 ? undefined : arr[index]\n}\n/* 二分查找到符合条件的最后一个元素的下标 没有找到返回-1 compare<*/\nexport function arrayBinaryFindLastIndex(arr = [], formatter, compare) {\n  return arrayBinarySearch((args, index) => {\n    args.left = index + 1;\n  }, arr, formatter, compare);\n}\n/* 二分查找到符合条件的最后一个元素 没有找到返回undefined compare<*/\nexport function arrayBinaryFindLast(arr = [], formatter, compare) {\n  const index = arrayBinaryFindLastIndex(arr, formatter, compare);\n  return index === -1 ? undefined : arr[index]\n}\n\n\n\n","/**\n * 创建一个防抖函数\n * @param {Function} callback - 要执行的回调函数\n * @param {number} delay - 延迟时间，默认为500毫秒\n * @returns {Function} - 返回一个防抖函数\n */\nexport function timerDebounced(callback, delay = 500) {\n  let timeout;\n  return function fun(...arg) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      callback(...arg);\n    }, delay);\n  };\n}\n\nexport function animationDebounced(callback) {\n  let id;\n  return function fun(...arg) {\n    cancelAnimationFrame(id);\n    id = requestAnimationFrame((time) => {\n      callback(...arg);\n    });\n  };\n}\n\n/**\n * 定时器节流函数\n * @param {Function} callback - 需要节流的回调函数\n * @param {number} delay - 节流的时间间隔，默认为500毫秒\n * @returns {Function} - 节流后的回调函数\n */\nexport function timerThrottle(callback, delay = 500) {\n  let isThrottled = false;\n  return function throttledCallback(...args) {\n    if (isThrottled) return;\n    isThrottled = true;\n    callback(...args);\n    setTimeout(() => {\n      isThrottled = false;\n    }, delay);\n  };\n}\n/***\n *\n */\nexport function timeRefush(props = {}) {\n  const config = {\n    formatterTime: (date) => date.getDate(),\n    onChange: () => undefined,\n    once: false,\n    ms: 1000,\n    ...props,\n  };\n  let prveTime = config.formatterTime(new Date());\n  const timer = setInterval(() => {\n    const date = new Date();\n    const time = config.formatterTime(date);\n    if (prveTime !== time) {\n      config.onChange(time);\n      if (config.once) clearInterval(timer);\n    }\n    prveTime = time;\n  }, config.ms);\n}\n","import { camelCaseToKebabCase, assignStyle, convertToCamelCase, RainbowEvent } from './utils';\r\nimport { treeAttrsChangeIMP } from '../base/imps/index.js';\r\nimport { animationDebounced } from \"@rainbow_ljy/rainbow-js\";\r\n\r\n// export class RainbowElement extends HTMLElement {\r\n//     static $initProps(props) {\r\n//         const defaultKeys = ['r-columns', 'r-min-auto-width'];\r\n//         const keys = [];\r\n//         const attrs = {};\r\n//         for (const key in props) {\r\n//             if (Object.prototype.hasOwnProperty.call(props, key)) {\r\n//                 keys.push(key)\r\n//                 if (props[key]?.default instanceof Function) attrs[key] = props[key].default(attrs)\r\n//                 else attrs[key] = props[key]?.default;\r\n//                 attrs[convertToCamelCase(key)] = attrs[key]\r\n//             }\r\n//         }\r\n//         this.prototype.$props = props\r\n//         this.prototype.$attrs = attrs\r\n//         return [...defaultKeys, ...keys];\r\n//     }\r\n\r\n//     IMPS = [treeAttrsChangeIMP];\r\n\r\n//     $isASTinit = false;\r\n//     $childrenResizeObserver;\r\n//     $resizeObserver;\r\n//     $mutationObserver;\r\n//     $mutationObserverInit = { childList: true, attributes: true, attributeOldValue: true };\r\n//     $cache = { offset: {}, class: new Map(), style: {} };\r\n//     $renderEvents = [];\r\n\r\n//     constructor() {\r\n//         super();\r\n\r\n\r\n\r\n\r\n\r\n//         this.$initResizeObserver();\r\n//         this.$initMutationObserver();\r\n//         this.$initChildrenResizeObserver();\r\n\r\n\r\n//         treeAttrsChange.add(this.$onTreeAttrsChange);\r\n//     }\r\n\r\n//     $onTreeAttrsChange = () => {\r\n//         console.log(\"changeTreeAttrs\", [this]);\r\n//     }\r\n\r\n//     $setStylePx(num) {\r\n//         if (!isNaN(Number(num))) return num + 'px';\r\n//         return ''\r\n//     }\r\n\r\n// $setStyle(fmtStyle = () => ({})) {\r\n//     let ftStyle = fmtStyle(this.$attrs) || {};\r\n//     let newStyle = ftStyle;\r\n//     if (ftStyle instanceof Array) {\r\n//         newStyle = ftStyle.filter(Boolean).reduce((add, value) => {\r\n//             Object.assign(add, value);\r\n//             return add\r\n//         }, {})\r\n//     }\r\n\r\n//     deleteKey(newStyle, this.$cache.style);\r\n//     deleteKey(this.$cache.style, this.style, true);\r\n//     assignStyle(this.style, newStyle);\r\n//     this.$cache.style = newStyle;\r\n// }\r\n\r\n// $setClass(fmtClass = () => []) {\r\n//     let newClass = fmtClass(this.$attrs)\r\n//     if (newClass?.length === undefined) newClass = [newClass]\r\n//     newClass = newClass.filter(Boolean);\r\n//     let newMap = new Map();\r\n//     newClass.forEach((key) => {\r\n//         newMap.set(key, key);\r\n//         this.$cache.class.delete(key);\r\n//         this.classList.add(key)\r\n//     });\r\n//     this.$cache.class.forEach((key, v) => {\r\n//         this.classList.remove(key)\r\n//     })\r\n//     this.$cache.class = newMap;\r\n// }\r\n\r\n//     $createCustomEvent(name, event, eventInitDict = {},) {\r\n//         const newEvent = new CustomEvent(name, { bubbles: true, cancelable: true, ...eventInitDict })\r\n//         for (const key in event) {\r\n//             try {\r\n//                 if (newEvent[key] === undefined) newEvent[key] = event[key];\r\n//             } catch (error) {\r\n//                 console.warn(error);\r\n//             }\r\n//         }\r\n//         return newEvent\r\n//     }\r\n\r\n//     $getParentByType(name, p = this) {\r\n//         if (!p) return;\r\n//         const parent = p.parentNode;\r\n//         if (!parent) return;\r\n//         const tName = parent.constructor.name;\r\n//         if (tName === name || parent.$elementName === name) return parent;\r\n//         return this.$getParentByType(name, parent)\r\n//     }\r\n\r\n// $getOffsetTop(p, num = 0) {\r\n//     let offsetTop = this.offsetTop;\r\n//     let top = num + offsetTop;\r\n//     if (this.offsetParent === p) return top;\r\n//     return this.$getOffsetTop(this.offsetParent, top);\r\n// }\r\n\r\n//     $dispatchOn(eName, ...args) {\r\n//         this?.[eName]?.(...args)\r\n//         if (this.$renderEvents.includes(eName)) this.$onRender(eName, ...args)\r\n//     }\r\n\r\n//     $initMutationObserver() {\r\n//         try {\r\n//             this.$mutationObserver = new MutationObserver(this.$mutationObserverCB.bind(this));\r\n//             this.$mutationObserver.observe(this, this.$mutationObserverInit)\r\n//         } catch (error) {\r\n//             console.warn(error);\r\n//         }\r\n//     }\r\n//     $mutationObserverCB(mutationsList, ...arg) {\r\n//         this.$dispatchOn('$onMutation', mutationsList, ...arg)\r\n//         for (let mutation of mutationsList) {\r\n//             if (mutation.type === \"childList\") {\r\n//                 const addedNodes = Array.from(mutation.addedNodes).filter(el => el.style);\r\n//                 const removedNodes = Array.from(mutation.removedNodes).filter(el => el.style);\r\n//                 addedNodes.forEach(ele => this.$childrenResizeObserver.observe(ele));\r\n//                 removedNodes.forEach(ele => this.$childrenResizeObserver.unobserve(ele));\r\n//                 this.$dispatchOn('$onChildChange', mutation)\r\n//             } else if (mutation.type === \"attributes\") {\r\n//                 this.$dispatchOn('$onAttributeChange', mutation)\r\n//                 // console.log('$onAttributeChange', mutation)\r\n//             }\r\n//         }\r\n//     }\r\n//     $onRender() { }\r\n//     $onMutation() { }\r\n//     $onChildChange() { }\r\n//     $onAttributeChange() { }\r\n\r\n\r\n//     $initChildrenResizeObserver() {\r\n//         try {\r\n//             this.$childrenResizeObserver = new ResizeObserver(this.$childrenResizeObserverCB.bind(this));\r\n//         } catch (error) {\r\n//             console.warn(error);\r\n//         }\r\n//     }\r\n//     $childrenResizeObserverCB(...arg) {\r\n//         this.$dispatchOn('$onChildrenResize', ...arg);\r\n//     }\r\n\r\n\r\n//     $initResizeObserver() {\r\n//         try {\r\n//             this.$resizeObserver = new ResizeObserver(this.$resizeObserverCB.bind(this));\r\n//             this.$resizeObserver.observe(this)\r\n//         } catch (error) {\r\n//             console.warn(error);\r\n//         }\r\n//     }\r\n//     $resizeObserverCB(...arg) {\r\n//         this.$dispatchOn('$onResizeObserver', ...arg);\r\n//         const cacheOffset = this.$cache.offset;\r\n//         const newOffset = this?.getBoundingClientRect?.();\r\n//         if (cacheOffset.width !== newOffset.width || cacheOffset.height !== newOffset.height) this.$dispatchOn('$onResize', newOffset, ...arg)\r\n//         if (cacheOffset.width !== newOffset.width) this.$dispatchOn('$onWidthChange', newOffset, ...arg);\r\n//         if (cacheOffset.height !== newOffset.height) this.$dispatchOn('$onHeightChange', newOffset, ...arg);\r\n//         this.$cache.offset = newOffset;\r\n//     }\r\n//     $onResize() { }\r\n//     $onWidthChange() { }\r\n//     $onHeightChange() { }\r\n\r\n\r\n//     $setAttrsProperty(name, value) {\r\n//         this.$attrs[name] = value;\r\n//         this.$attrs[convertToCamelCase(name)] = value;\r\n//     }\r\n//     $setAttrsProp(name, value) {\r\n//         const pop = this.$props[name];\r\n//         if (!pop) return this.$setAttrsProperty(name, value);\r\n//         let cto = pop.type || pop;\r\n//         if (cto instanceof Array) {\r\n//             let t = cto.map(el => el.name);\r\n//             if (t.includes('String')) cto = String\r\n//             else cto = cto[0];\r\n//         }\r\n//         let newV = (() => {\r\n//             if (value === 'true') return true;\r\n//             if (value === 'false') return false;\r\n//             if (value === 'null') return null;\r\n//             if (value === 'undefined') return undefined;\r\n//             return cto(value);\r\n//         })()\r\n//         this.$setAttrsProperty(name, newV)\r\n//     }\r\n//     $onAttrsChange() { }\r\n//     attributeChangedCallback(name, oldValue, newValue) {\r\n//         this.$setAttrsProp(name, newValue)\r\n//         if (this.$isASTinit === true) this.$dispatchOn('$onAttrsChange', this.$attrs, name, oldValue, newValue)\r\n//     }\r\n\r\n\r\n//     $onConnected() { }\r\n//     connectedCallback() {\r\n//         this.$isASTinit = true;\r\n//         Array.from(this.children).forEach(child => this.$childrenResizeObserver.observe(child));\r\n//         this.$dispatchOn('$onConnected')\r\n//         // console.log('自定义元素添加至页面。', this.offsetWidth);\r\n//         // var style = window.getComputedStyle(this);\r\n//         // console.log(style)\r\n//         // var absolute = style.getPropertyValue('--r-absolute').trim(); // 获取颜色值\r\n//         // console.log(absolute);\r\n\r\n//     }\r\n\r\n\r\n//     $onAdopted() { }\r\n//     adoptedCallback() {\r\n//         this.$dispatchOn('$onAdopted')\r\n//         // console.log(\"自定义元素移动至新页面。\");\r\n//     }\r\n\r\n\r\n//     $onDisconnected() { }\r\n//     disconnectedCallback() {\r\n//         // console.log(\"自定义元素从页面中移除。\");\r\n//         this.$resizeObserver?.disconnect?.();\r\n//         this.$childrenResizeObserver?.disconnect?.();\r\n//         this.$mutationObserver?.disconnect?.();\r\n//         this.$dispatchOn('$onDisconnected')\r\n//     }\r\n\r\n// }\r\n\r\n\r\nexport class RainbowElement extends HTMLElement {\r\n    static $registerProps(types) {\r\n        const keys = [];\r\n        const props = {};\r\n        for (const key in types) {\r\n            if (Object.prototype.hasOwnProperty.call(types, key)) {\r\n                keys.push(key)\r\n                if (types[key]?.default instanceof Function) props[key] = types[key].default(props)\r\n                else props[key] = types[key]?.default;\r\n            }\r\n        }\r\n        this.prototype.$types = types\r\n        this.prototype.$props = props\r\n        return keys;\r\n    }\r\n\r\n    static registerIMPS(imps = []) {\r\n        this.prototype.IMPS = [treeAttrsChangeIMP, ...imps]\r\n    }\r\n\r\n    static IMPS = this.registerIMPS();\r\n\r\n    $ = {\r\n        isInitAttrs: false,\r\n        data: {},\r\n        DATA: new Proxy({}, { get: (target, prop) => this.$.data[camelCaseToKebabCase(prop)] }),\r\n        attrs: {},\r\n        resolveFunCss: {\r\n            calc: (v, ...arg) => {\r\n                return v\r\n            }\r\n\r\n        },\r\n        resolveCss: (key, str = '') => {\r\n            try {\r\n                const isAttrFun = /r-attr\\([^\\)]*?\\)/.test(str);\r\n                if (isAttrFun) str = this.$props[key];\r\n\r\n                let cssVal = str.replace(/\\d+px|\\d+vw|\\d+vh/g, (len) => {\r\n                    if (/\\d+px/.test(len)) return Number(len.replaceAll('px', ''))\r\n                    if (/\\d+vw/.test(len)) return Number(len.replaceAll('vw', '')) / 100 * window.innerWidth\r\n                    if (/\\d+vh/.test(len)) return Number(len.replaceAll('vh', '')) / 100 * window.innerHeight\r\n                    return len\r\n                })\r\n\r\n                const isFunstr = /([^\\(]*?)\\([^\\)]*?\\)/.test(cssVal);\r\n                if (isFunstr) return eval(`this.$.resolveFunCss.${cssVal}`)\r\n\r\n                let number = Number(cssVal);\r\n                if (!isNaN(number)) return number;\r\n\r\n                // console.log(key, cssVal, isFunstr);\r\n                return cssVal;\r\n            } catch (error) {\r\n                console.log(error);\r\n\r\n                return str\r\n            }\r\n        },\r\n        cache: {\r\n            data: {},\r\n            style: {},\r\n            class: new Map(),\r\n        },\r\n        setStyle: (fmtStyle = () => ({})) => {\r\n            let ftStyle = fmtStyle(this.$.data) || {};\r\n            let newStyle = ftStyle;\r\n            if (ftStyle instanceof Array) {\r\n                newStyle = ftStyle.filter(Boolean).reduce((add, value) => {\r\n                    Object.assign(add, value);\r\n                    return add\r\n                }, {})\r\n            }\r\n            for (const key in newStyle) {\r\n                if (Object.prototype.hasOwnProperty.call(newStyle, key)) {\r\n                    if (this.$.cache.style[key] !== newStyle[key]) {\r\n                        this.style[key] = '';\r\n                        this.style[key] = newStyle[key];\r\n                    }\r\n                    delete this.$.cache.style[key];\r\n                }\r\n            }\r\n            for (const key in this.$.cache.style) {\r\n                if (Object.prototype.hasOwnProperty.call(this.$.cache.style, key)) {\r\n                    this.style[key] = '';\r\n                }\r\n            }\r\n            this.$.cache.style = newStyle;\r\n        },\r\n        setClass: (fmtClass = () => []) => {\r\n            let newClass = fmtClass(this.$.data)\r\n            if (newClass?.length === undefined) newClass = [newClass]\r\n            newClass = newClass.filter(Boolean);\r\n            let newMap = new Map();\r\n            newClass.forEach((key) => {\r\n                newMap.set(key, key);\r\n                this.$.cache.class.delete(key);\r\n                this.classList.add(key)\r\n            });\r\n            this.$.cache.class.forEach((key, v) => {\r\n                this.classList.remove(key)\r\n            })\r\n            this.$.cache.class = newMap;\r\n        },\r\n        findParentByType: (name, p = this) => {\r\n            if (!p) return;\r\n            const parent = p.parentNode;\r\n            if (!parent) return;\r\n            const tName = parent.constructor.name;\r\n            if (tName === name || parent.$elementName === name) return parent;\r\n            return this.$.findParentByType(name, parent)\r\n        },\r\n        getOffsetTop: (p, num = 0) => {\r\n            let offsetTop = this.offsetTop;\r\n            let top = num + offsetTop;\r\n            if (this.offsetParent === p) return top;\r\n            return this.$.getOffsetTop(this.offsetParent, top);\r\n        }\r\n\r\n    }\r\n\r\n    constructor(...arg) {\r\n        super(...arg);\r\n        this.$debouncedRender = animationDebounced((...pop) => this.$render(...pop))\r\n        this.IMPS.map(el => el?.simult)?.forEach(el => el?.init?.call?.(this));\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        this.$props[name] = newValue;\r\n        if (this.$.isInitAttrs === true) this.$onAttributeChanged(name, oldValue, newValue);\r\n    }\r\n\r\n    $onAttributeChanged() {\r\n        this.IMPS.map(el => el?.simult)?.forEach(el => el?.changeAttr?.call?.(this));\r\n        this.$changePropsRender();\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.$.isInitAttrs = true;\r\n        this.IMPS.map(el => el?.simult)?.forEach(el => el?.connected?.call?.(this));\r\n        this.$changePropsRender();\r\n    }\r\n\r\n    adoptedCallback() {\r\n        this.IMPS.map(el => el?.simult)?.forEach(el => el?.adopted?.call?.(this));\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.IMPS.map(el => el?.simult)?.forEach(el => el?.disconnected?.call?.(this));\r\n    }\r\n\r\n    $changePropsRender(force) {\r\n        let isChange = false\r\n        const css = {};\r\n        const style = window.getComputedStyle(this);\r\n        for (const key in this.$props) {\r\n            if (Object.prototype.hasOwnProperty.call(this.$props, key)) {\r\n                const cssVal = style.getPropertyValue('--' + key).trim();\r\n                css[key] = this.$.resolveCss(key, cssVal);\r\n                if (this.$.cache.data[key] !== css[key]) isChange = true\r\n            }\r\n        }\r\n        this.$.data = css;\r\n        this.$.cache.data = css;\r\n        // console.log(isChange);\r\n        if (isChange || force === true) this.$debouncedRender(css);\r\n        return css\r\n    }\r\n\r\n    $render() { }\r\n\r\n}\r\n","import { RainbowElement } from '../base/index.js'\r\nimport { resizeObserverIMP } from '../base/imps/index.js'\r\nimport './index.css'\r\n\r\nexport class RGrid extends RainbowElement {\r\n    static observedAttributes = this.$registerProps({\r\n        'r-columns': { type: Number, default: 1 },\r\n        'r-min-auto-width': Number,\r\n        'r-gap': [Number, String],\r\n        'r-row-gap': [Number, String],\r\n        'r-column-gap': [Number, String],\r\n        'r-grid-wrap': String,\r\n        'r-grid-stretch': String,\r\n    });\r\n\r\n    static IMPS = this.registerIMPS([resizeObserverIMP({ isOnlyResizeWidth: true })]);\r\n\r\n    get $$columns() {\r\n        let { rColumns, rMinAutoWidth } = this.$.DATA;\r\n        if (rMinAutoWidth) return Math.floor(this.offsetWidth / rMinAutoWidth);\r\n        return rColumns;\r\n    };\r\n\r\n    $$doLayout() {\r\n        const { rGridWrap, rGridStretch } = this.$.DATA\r\n        let children = Array.from(this.children)\r\n        let clumnList = children.map(el => el.getAttribute('grid-column') * 1 || 1)\r\n        let start = 1;\r\n        let gridColumns = [];\r\n        let maxColumn = this.$$columns + 1;\r\n        clumnList.forEach((num, index) => {\r\n            let end = start + num;\r\n            if (rGridWrap === 'wrap') {\r\n                if (end > maxColumn) {\r\n                    if (rGridStretch === 'stretch') {\r\n                        if (gridColumns[index - 1]) gridColumns[index - 1].end = maxColumn;\r\n                    }\r\n                    start = 1;\r\n                    let end2 = start + num\r\n                    end = end2 > maxColumn ? maxColumn : end2;\r\n                }\r\n            } else {\r\n                if (end > maxColumn) end = maxColumn\r\n            }\r\n            gridColumns.push({\r\n                start: start,\r\n                end: end,\r\n                index\r\n            })\r\n            start = start + num\r\n            if (start > this.$$columns) start = 1\r\n        });\r\n        children.forEach((el, index) => {\r\n            el.classList.add('r-grid-item')\r\n            el.style['grid-column-start'] = gridColumns[index].start\r\n            el.style['grid-column-end'] = gridColumns[index].end\r\n        });\r\n    }\r\n\r\n    $render() {\r\n        console.log(this.$.data)\r\n        const { rGap, rRowGap, rColumnGap } = this.$.DATA\r\n        this.$.setStyle(() => ([{\r\n            \"grid-template-columns\": `repeat(${this.$$columns}, 1fr)`,\r\n            \"grid-gap\": rGap + 'px',\r\n            \"row-gap\": (rRowGap || rGap) + 'px',\r\n            \"column-gap\": (rColumnGap || rGap) + 'px',\r\n        }]))\r\n        this.$$doLayout();\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define(\"r-grid\", RGrid);","import { RainbowElement } from '../base/index.js'\r\nimport './index.css'\r\n\r\nexport class RAbsolute extends RainbowElement {\r\n    static observedAttributes = this.$registerProps({\r\n        'r-position': [Boolean, String],\r\n        // left: [Number, String],\r\n        // right: [Number, String],\r\n        // bottom: [Number, String],\r\n        // top: [Number, String],\r\n    });\r\n\r\n\r\n\r\n\r\n    // $renderEvents = ['$onConnected', '$onAttrsChange']\r\n\r\n    // $onRender() {\r\n    //     this.$setClass((props)=>[\r\n    //         \"r-absolute\",\r\n    //         props.position && 'r-absolute-' + props.position,\r\n    //     ])\r\n    // }\r\n\r\n}\r\n\r\ncustomElements.define(\"r-absolute\", RAbsolute);","import { RainbowElement } from '../base/index.js'\r\nimport { arrayLoopMap } from '@rainbow_ljy/rainbow-js'\r\nimport { treeObserverIMP } from '../base/imps/index.js'\r\nimport './index.css'\r\n\r\n\r\nexport class RFalls extends RainbowElement {\r\n    static observedAttributes = this.$registerProps({\r\n        'r-min-auto-width': Number,\r\n        'r-columns': { type: Number, default: 2 },\r\n        'r-gap': { type: Number, default: 0 },\r\n        'r-row-gap': { type: Number, default: 0 },\r\n        'r-column-gap': { type: Number, default: 0 },\r\n    });\r\n\r\n    static IMPS = this.registerIMPS([treeObserverIMP({\r\n        onWidthChange() { this.$debouncedRender(this.$?.data) },\r\n        onChildrenSizeChange() { this.$debouncedRender(this.$?.data) }\r\n    })]);\r\n\r\n    $render() {\r\n        let { rMinAutoWidth, rColumns, rGap, rRowGap, rColumnGap } = this.$.DATA\r\n        // console.log(rMinAutoWidth, rColumns, rGap, rRowGap, rColumnGap);\r\n        const col = (() => {\r\n            if (rMinAutoWidth) return Math.floor(this.offsetWidth / rMinAutoWidth);\r\n            return rColumns;\r\n        })();\r\n        // console.log(col);\r\n        let colGap = rColumnGap || rGap\r\n        let rowGap = rRowGap || rGap\r\n        let left = (i) => `calc( ${(100 / col) * i}% - ${(((col - 1) * colGap) / col) * i}px + ${i * colGap}px )`;\r\n        const list = arrayLoopMap(col, (i) => ({ height: 0, left: left(i), top: 0, index: i }));\r\n        // console.log(list);\r\n        let itemWidth = `calc( ${100 / col}% - ${((col - 1) * colGap) / col}px )`\r\n        // console.log(itemWidth);\r\n        Array.from(this.children).forEach(child => {\r\n            child.classList.add('r-falls-item');\r\n            child.style.width = itemWidth;\r\n            let node = getMinHeightItem(list);\r\n            if (node.height) node.height = node.height + rowGap;\r\n            child.style.left = node.left;\r\n            child.style.top = node.height + 'px';\r\n            node.height = node.height + child.offsetHeight;\r\n        });\r\n        this.style.height = getMaxHeightItem(list).height + 'px'\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction getMinHeightItem(list) {\r\n    let item = list[0];\r\n    list.forEach((el) => { if (el.height < item.height) item = el });\r\n    return item;\r\n}\r\n\r\nfunction getMaxHeightItem(list) {\r\n    let item = list[0];\r\n    list.forEach((el) => { if (el.height > item.height) item = el });\r\n    return item;\r\n}\r\ncustomElements.define(\"r-falls\", RFalls);","import './index.css';\r\nimport { RainbowElement, createCustomEvent } from '../base/index.js'\r\n\r\nexport class RScroll extends RainbowElement {\r\n    $elementName = 'RScroll'\r\n\r\n    $$scrollEl;\r\n    $$prveScrollTop;\r\n\r\n    get scrollTop() {\r\n        return this.$$scrollEl.scrollTop;\r\n    }\r\n\r\n    set scrollTop(v) {\r\n        this.$$scrollEl.scrollTop = v;\r\n    }\r\n\r\n    scrollBy(...arg) {\r\n        this.$$scrollEl.scrollBy(...arg)\r\n    }\r\n\r\n    scrollTo(...arg) {\r\n        this.$$scrollEl.scrollTo(...arg)\r\n    }\r\n\r\n    constructor(...arg) {\r\n        super(...arg);\r\n        this.attachShadow({ mode: 'open' });\r\n\r\n        this.$$scrollEl = document.createElement('div');\r\n        this.$$scrollEl.className = 'r-scroll-element';\r\n        this.$$scrollEl.setAttribute('part', 'r-scroll-element  sdt');\r\n\r\n        const content = document.createElement('div');\r\n        content.className = 'r-scroll-content';\r\n        content.setAttribute('part', 'r-scroll-content  sdt');\r\n\r\n        const topSlot = document.createElement('slot');\r\n        topSlot.setAttribute('name', 'top');\r\n        topSlot.className = 'top';\r\n        const contentSlot = document.createElement('slot');\r\n        contentSlot.className = 'content';\r\n        const bottomSlot = document.createElement('slot');\r\n        bottomSlot.setAttribute('name', 'bottom');\r\n        bottomSlot.className = 'bottom';\r\n\r\n        content.appendChild(contentSlot);\r\n        this.$$scrollEl.appendChild(topSlot);\r\n        this.$$scrollEl.appendChild(content);\r\n        this.$$scrollEl.appendChild(bottomSlot);\r\n        this.shadowRoot.appendChild(this.$$scrollEl);\r\n\r\n        this.$$scrollEl.addEventListener('scroll', this.$$onScroll.bind(this));\r\n    }\r\n\r\n    $$onScroll(event) {\r\n        const sEl = this.$$scrollEl;\r\n        event.scrollTop = sEl.scrollTop;\r\n        event.moveY = this.$$prveScrollTop - sEl.scrollTop;\r\n        if (event.moveY < 0) this.dispatchEvent(createCustomEvent('scrollUp', event));\r\n        if (this.onscroll) this.onscroll(event)\r\n        this.dispatchEvent(createCustomEvent('scroll', event))\r\n        if (event.moveY > 0) this.dispatchEvent(createCustomEvent('scrollDown', event));\r\n        this.$$prveScrollTop = sEl.scrollTop;\r\n    }\r\n\r\n    connectedCallback(...arg) {\r\n        super.connectedCallback(...arg)\r\n        this.$$prveScrollTop = this.$$scrollEl.scrollTop;\r\n    }\r\n\r\n    disconnectedCallback(...arg) {\r\n        super.connectedCallback(...arg)\r\n        this.$$scrollEl.removeEventListener('scroll', this.$$onScroll.bind(this));\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define('r-scroll', RScroll);","import './index.css';\r\nimport { RainbowElement } from '../base/index.js'\r\n\r\nexport class RScrollMemoryBubble extends RainbowElement {\r\n    static observedAttributes = this.$registerProps({\r\n        'r-orientation': { type: String, default: \"right\" },  // \"left\" \"right\" \"top\" \"bottom\" \r\n        'r-init-visibility': { type: String, default: 'visible' }, // 'hidden' 'visible'\r\n        'r-visible-distance': { type: String, default: '100px' }, // px\r\n        'r-visible-reversal': String // 'noReversal' 'reversal'\r\n    });\r\n\r\n    $$visible = true;\r\n    $$cacheMoveY = 0;\r\n    $$scrollParent;\r\n\r\n    connectedCallback(...arg) {\r\n        super.connectedCallback(...arg);\r\n        this.$$visible = this.$.DATA.rInitVisibility === 'visible'\r\n        this.$$scrollParent = this.$.findParentByType('RScroll');\r\n\r\n        this.$$scrollParent.addEventListener('scrollUp', this.$$setVisibleFalse.bind(this))\r\n        this.$$scrollParent.addEventListener('scrollDown', this.$$setVisibleTrue.bind(this))\r\n    }\r\n\r\n    disconnectedCallback(...arg) {\r\n        super.connectedCallback(...arg);\r\n\r\n        this.$$scrollParent.removeEventListener('scrollUp', this.$$setVisibleFalse.bind(this));\r\n        this.$$scrollParent.removeEventListener('scrollDown', this.$$setVisibleTrue.bind(this));\r\n    }\r\n\r\n    $$setClass() {\r\n        const { rOrientation } = this.$.DATA\r\n        this.$.setClass(() => ([\r\n            \"r-scroll-memory-bubble-\" + rOrientation,\r\n            this.$$visible ? `r-scroll-memory-bubble-visible` : `r-scroll-memory-bubble-hide`,\r\n            this.$$visible ? `r-scroll-memory-bubble-visible-${rOrientation}` : `r-scroll-memory-bubble-hide-${rOrientation}`,\r\n        ]))\r\n    }\r\n\r\n    $$setVisibleTrue(event) {\r\n        if (this.$$visible === true) return this.$$cacheMoveY = 0;\r\n        this.$$cacheMoveY = this.$$cacheMoveY + Math.abs(event.moveY);\r\n        if (this.$$cacheMoveY >= this.$.DATA.rVisibleDistance) {\r\n            this.$$cacheMoveY = 0;\r\n            this.$$visible = true;\r\n            this.$$setClass();\r\n        }\r\n    }\r\n\r\n    $$setVisibleFalse(event) {\r\n        if (this.$$visible === false) return this.$$cacheMoveY = 0;\r\n        this.$$cacheMoveY = this.$$cacheMoveY + Math.abs(event.moveY);\r\n        if (this.$$cacheMoveY >= this.$.DATA.rVisibleDistance) {\r\n            this.$$cacheMoveY = 0;\r\n            this.$$visible = false;\r\n            this.$$setClass();\r\n        }\r\n    }\r\n\r\n    $render() {\r\n        this.$$setClass();\r\n    }\r\n}\r\n\r\ncustomElements.define('r-scroll-memory-bable', RScrollMemoryBubble);","import \"./index.css\";\r\nimport { RainbowElement, renderChildren } from \"../base/index.js\";\r\nimport { arrayLoop, arrayLoopMap } from \"@rainbow_ljy/rainbow-js\";\r\n\r\nexport class RRollingTextNum extends RainbowElement {\r\n  static observedAttributes = this.$registerProps({\r\n    \"r-initial-animation\": String, // true false\r\n    \"r-transition\": String,\r\n  });\r\n\r\n  $$container = document.createElement(\"span\");\r\n  $$measure = document.createElement(\"span\");\r\n  $$rotes = arrayLoopMap(10, () => document.createElement(\"span\"));\r\n  $$num = 10;\r\n  $$value = 0;\r\n  $$isMonted = false;\r\n\r\n  get value() {\r\n    return this.$$value;\r\n  }\r\n\r\n  set value(v) {\r\n    this.$$value = v;\r\n    if (this.$$isMonted === false) return;\r\n    this.$$rotateX(true);\r\n  }\r\n\r\n  setValue(v, ani = true) {\r\n    this.$$value = v;\r\n    if (this.$$isMonted === false) return;\r\n    this.$$rotateX(ani);\r\n  }\r\n\r\n  constructor(...arg) {\r\n    super(...arg);\r\n    this.attachShadow({ mode: \"open\" });\r\n    this.$$container.className = \"r-rolling-num-container r-rolling-num-container-ani\";\r\n    this.$$container.setAttribute(\"part\", \"r-rolling-num-container r-rolling-num-container-ani \");\r\n    this.$$measure.className = \"r-rolling-num-measure\";\r\n    this.$$measure.setAttribute(\"part\", \"r-rolling-num-measure\");\r\n    this.$$measure.innerText = \"9\";\r\n    this.$$container.appendChild(this.$$measure);\r\n    this.shadowRoot.appendChild(this.$$container);\r\n  }\r\n\r\n  $$renderNums() {\r\n    const num = this.$$num;\r\n    const deg = 360 / num;\r\n    const sin = Math.sin((Math.PI / 180) * deg);\r\n    const translateZ = (sin + 0.9) * (this.$$measure.offsetHeight || 1);\r\n\r\n    this.$$rotes.forEach((div, index) => {\r\n      div.style.transform = `rotateX(${deg * index}deg)  translateZ(${translateZ}px)`;\r\n      div.setAttribute(\"part\", \"r-rolling-num-rotate\");\r\n      div.className = \"r-rolling-num-rotate\";\r\n      div.innerText = index;\r\n      this.$$container.appendChild(div);\r\n    });\r\n  }\r\n\r\n  async $$rotateX(isTransition) {\r\n    const { rTransition, rInitialAnimation } = this.$.DATA;\r\n    const rotateX = -((this.$$value / this.$$num) * 360);\r\n\r\n    if (isTransition) {\r\n      this.$$container.style.transition = \"\";\r\n      this.$$container.style.transition = rTransition;\r\n    }\r\n\r\n    // if (this.$$isMonted === false && rInitialAnimation === \"true\") {\r\n    //   await new Promise((resolve) => requestAnimationFrame(() => resolve(true)));\r\n    // }\r\n    this.$$container.style.transform = \"\";\r\n    this.$$container.style.transform = `rotateX(${rotateX}deg)`;\r\n  }\r\n\r\n  $render() {}\r\n\r\n  connectedCallback(...arg) {\r\n    super.connectedCallback(...arg);\r\n    const { rTransition, rInitialAnimation } = this.$.DATA;\r\n    this.$$renderNums();\r\n    this.$$rotateX(rInitialAnimation === \"true\");\r\n    this.$$isMonted = true;\r\n  }\r\n\r\n  disconnectedCallback(...arg) {\r\n    super.connectedCallback(...arg);\r\n  }\r\n}\r\n\r\ncustomElements.define(\"r-rolling-text-num\", RRollingTextNum);\r\n\r\nexport class RRollingText extends RainbowElement {\r\n  static observedAttributes = this.$registerProps({\r\n    \"r-value\": String,\r\n    \"r-math-type\": String, // 'floor' , 'none'\r\n  });\r\n\r\n  $$renderNumNodes = renderChildren({\r\n    parentNode: this,\r\n  });\r\n\r\n  $render() {\r\n    let { rValue, rMathType } = this.$.DATA;\r\n\r\n    let rValueStr = String(rValue);\r\n    let values = (() => {\r\n      return arrayLoopMap(rValueStr.length, (index) => {\r\n        const size = Number([1, ...arrayLoopMap(index, () => 0)].join(\"\"));\r\n        if (rMathType === \"floor\") return Math.floor(rValue / size);\r\n        return rValue / size;\r\n      });\r\n    })();\r\n\r\n    this.$$renderNumNodes.renderList(values, {\r\n      keyExtractor: (item, index) => index,\r\n      onCreateNode: (item, index, key) => {\r\n        let node = document.createElement(\"r-rolling-text-num\");\r\n        node.setAttribute(\"key\", key);\r\n        node.value = item;\r\n        return node;\r\n      },\r\n      onCacheNode: (node, item, index, key) => {\r\n        node.value = item;\r\n        node.setAttribute(\"key\", key);\r\n        return node;\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ncustomElements.define(\"r-rolling-text\", RRollingText);\r\n"],"names":["deleteKey","target","source","bool","key","Object","prototype","hasOwnProperty","call","error","assignStyle","style","newStyle","convertToCamelCase","str","includes","parts","split","slice","map","part","charAt","toUpperCase","join","camelCaseToKebabCase","replace","toLowerCase","RainbowEvent","Event","constructor","type","eventInitDict","event","super","this","detail","Array","undefined","console","warn","createCustomEvent","name","newEvent","CustomEvent","bubbles","cancelable","renderChildren","props","options","parentNode","pointer","cacheMap","Map","renderList","p","config","beforeEach","keyExtractor","item","index","onCacheNode","onCreateNode","forEach","node","has","get","nextSibling","insertBefore","delete","set","remove","events","MutationObserver","mutations","fun","Function","observe","document","subtree","attributes","attributeOldValue","treeAttrsChangeIMP","simult","init","$changePropsRender","disconnected","settle","async","resizeObserverIMP","obs","isOnlyResizeWidth","isOnlyResizeHeight","resizeCallback","resizeOptions","cache","cb","bind","$debouncedRender","ResizeObserver","arg","offset","width","offsetWidth","height","offsetHeight","disconnect","treeObserverIMP","mObserver","rObserver","childrenResizeOptions","onChildrenSizeChange","onSizeChange","onWidthChange","onHeightChange","mutationOptions","childList","onChildChange","onAttributeChange","entries","some","el","mutation","addedNodes","from","filter","removedNodes","ele","unobserve","arrayAt","list","length","arrayLoopMap","num","arr","push","animationDebounced","callback","id","cancelAnimationFrame","requestAnimationFrame","time","at","RainbowElement","HTMLElement","$registerProps","types","keys","default","$types","$props","registerIMPS","imps","IMPS","static","$","isInitAttrs","data","DATA","Proxy","prop","attrs","resolveFunCss","calc","v","resolveCss","isAttrFun","test","cssVal","len","Number","replaceAll","window","innerWidth","innerHeight","isFunstr","eval","number","isNaN","log","class","setStyle","fmtStyle","ftStyle","Boolean","reduce","add","value","assign","setClass","fmtClass","newClass","newMap","classList","findParentByType","parent","$elementName","getOffsetTop","top","offsetTop","offsetParent","pop","$render","attributeChangedCallback","oldValue","newValue","$onAttributeChanged","changeAttr","connectedCallback","connected","adoptedCallback","adopted","disconnectedCallback","force","isChange","css","getComputedStyle","getPropertyValue","trim","RGrid","String","$$columns","rColumns","rMinAutoWidth","Math","floor","$$doLayout","rGridWrap","rGridStretch","children","clumnList","getAttribute","start","gridColumns","maxColumn","end","end2","rGap","rRowGap","rColumnGap","customElements","define","RAbsolute","RFalls","col","colGap","rowGap","left","i","itemWidth","child","getMinHeightItem","getMaxHeightItem","RScroll","$$scrollEl","$$prveScrollTop","scrollTop","scrollBy","scrollTo","attachShadow","mode","createElement","className","setAttribute","content","topSlot","contentSlot","bottomSlot","appendChild","shadowRoot","addEventListener","$$onScroll","sEl","moveY","dispatchEvent","onscroll","removeEventListener","RScrollMemoryBubble","$$visible","$$cacheMoveY","$$scrollParent","rInitVisibility","$$setVisibleFalse","$$setVisibleTrue","$$setClass","rOrientation","abs","rVisibleDistance","RRollingTextNum","$$container","$$measure","$$rotes","$$num","$$value","$$isMonted","$$rotateX","setValue","ani","innerText","$$renderNums","deg","translateZ","sin","PI","div","transform","isTransition","rTransition","rInitialAnimation","rotateX","transition","RRollingText","$$renderNumNodes","rValue","rMathType","values","size"],"mappings":"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"}